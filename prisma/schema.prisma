// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

enum RelationshipType {
  COMPOSITION
  INHERITANCE
  ASSOCIATION
}

enum Visibility {
  PUBLIC
  PRIVATE
  PROTECTED
}

enum DiagramElementType {
  CLASS
  INTERFACE
  RELATIONSHIP
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String
  password  String
  role      UserRole @default(VIEWER)
  createdAt DateTime @default(now())
  designs   Object[]
}

model Object {
  id          String            @id @default(uuid())
  creatorId   String
  creator     User             @relation(fields: [creatorId], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  name        String
  description String
  attributes  ObjectAttribute[]
  methods     ObjectMethod[]
  tags        TagsOnObjects[]
  categories  String[]
  fromRelationships Relationship[] @relation("FromObject")
  toRelationships   Relationship[] @relation("ToObject")
  diagramElements   DiagramElement[]
  comments         Comment[]
  history          History[]
}

model Relationship {
  id          String           @id @default(uuid())
  fromObjectId String
  toObjectId   String
  fromObject   Object          @relation("FromObject", fields: [fromObjectId], references: [id])
  toObject     Object          @relation("ToObject", fields: [toObjectId], references: [id])
  type        RelationshipType
  description String?
}

model ObjectAttribute {
  id           String  @id @default(uuid())
  objectId     String
  object       Object  @relation(fields: [objectId], references: [id])
  name         String
  type         String
  description  String
  defaultValue String?
  required     Boolean @default(false)
}

model ObjectMethod {
  id          String           @id @default(uuid())
  objectId    String
  object      Object           @relation(fields: [objectId], references: [id])
  name        String
  description String
  visibility  Visibility
  returnType  String?
  parameters  MethodParameter[]
}

model MethodParameter {
  id           String       @id @default(uuid())
  methodId     String
  method       ObjectMethod @relation(fields: [methodId], references: [id])
  name         String
  type         String
  defaultValue String?
  isOptional   Boolean      @default(false)
}

model Tag {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?
  objects     TagsOnObjects[]
}

model TagsOnObjects {
  objectId    String
  tagId       String
  object      Object     @relation(fields: [objectId], references: [id])
  tag         Tag        @relation(fields: [tagId], references: [id])

  @@id([objectId, tagId])
}

model History {
  id        String   @id @default(uuid())
  objectId  String
  object    Object   @relation(fields: [objectId], references: [id])
  userId    String
  timestamp DateTime @default(now())
  changes   String
}

model Diagram {
  id          String           @id @default(uuid())
  creatorId   String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  name        String
  description String?
  elements    DiagramElement[]
  comments    Comment[]
}

model DiagramElement {
  id        String             @id @default(uuid())
  diagramId String
  diagram   Diagram            @relation(fields: [diagramId], references: [id])
  objectId  String?
  object    Object?            @relation(fields: [objectId], references: [id])
  type      DiagramElementType
  positionX Float
  positionY Float
}

model Comment {
  id        String   @id @default(uuid())
  objectId  String?
  object    Object?  @relation(fields: [objectId], references: [id])
  diagramId String?
  diagram   Diagram? @relation(fields: [diagramId], references: [id])
  userId    String
  content   String
  createdAt DateTime @default(now())
}